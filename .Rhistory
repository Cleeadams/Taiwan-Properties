# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
# Step 1 design model
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# STA 5900 Project 2
rm(list=ls())
setwd('C:/Users/conno/Documents/School work/STA 5900/Project 2')
tab <- read.csv('taipei_train.csv')
# Creating prediction function
prediction_plot <- function(data, name_y, color_by = FALSE, m = 2, n=2){
palette_old <- palette()
palette(c("blue2","chocolate2","violetred4","aquamarine4","darkgoldenrod4","mediumorchid3","seagreen4","tan4","yellowgreen"))
omfrow <- par()$mfrow
par(mfrow = c(m,n))
if(color_by != FALSE){
col_ind <- which(names(data) == color_by)
cols <- as.numeric(data[,col_ind])
} else{
cols <- 1
}
y_ind <- which(names(data) == name_y)
y <- data[,y_ind]
data <- data[which(is.na(y) == FALSE),]; y <- data[,y_ind]
I <- (1:ncol(data))[-y_ind]
for(i in I){
name_x = names(data)[i]
x <- data[,i]
plot(x, y,pch=16,cex=0.75,
xlab = name_x,
ylab = name_y,
col = cols)
if(is.numeric(x)){
df <- data.frame(x,y)
df$loess <- predict(loess(y~x,df))
df <- df[order(x),]
lines(df$x, df$loess, col="dodgerblue",lwd=2)
}
}
par(mfrow=omfrow)
palette(palette_old)
}
# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
# Step 1 design model
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# STA 5900 Project 2
rm(list=ls())
setwd('C:/Users/conno/Documents/School work/STA 5900/Project 2')
tab <- read.csv('taipei_train.csv')
# Creating prediction function
prediction_plot <- function(data, name_y, color_by = FALSE, m = 2, n=2){
palette_old <- palette()
palette(c("blue2","chocolate2","violetred4","aquamarine4","darkgoldenrod4","mediumorchid3","seagreen4","tan4","yellowgreen"))
omfrow <- par()$mfrow
par(mfrow = c(m,n))
if(color_by != FALSE){
col_ind <- which(names(data) == color_by)
cols <- as.numeric(data[,col_ind])
} else{
cols <- 1
}
y_ind <- which(names(data) == name_y)
y <- data[,y_ind]
data <- data[which(is.na(y) == FALSE),]; y <- data[,y_ind]
I <- (1:ncol(data))[-y_ind]
for(i in I){
name_x = names(data)[i]
x <- data[,i]
plot(x, y,pch=16,cex=0.75,
xlab = name_x,
ylab = name_y,
col = cols)
if(is.numeric(x)){
df <- data.frame(x,y)
df$loess <- predict(loess(y~x,df))
df <- df[order(x),]
lines(df$x, df$loess, col="dodgerblue",lwd=2)
}
}
par(mfrow=omfrow)
palette(palette_old)
}
# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
# Step 1 design model
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# STA 5900 Project 2
rm(list=ls())
setwd('C:/Users/conno/Documents/School work/STA 5900/Project 2')
tab <- read.csv('taipei_train.csv')
# Creating prediction function
prediction_plot <- function(data, name_y, color_by = FALSE, m = 2, n=2){
palette_old <- palette()
palette(c("blue2","chocolate2","violetred4","aquamarine4","darkgoldenrod4","mediumorchid3","seagreen4","tan4","yellowgreen"))
omfrow <- par()$mfrow
par(mfrow = c(m,n))
if(color_by != FALSE){
col_ind <- which(names(data) == color_by)
cols <- as.numeric(data[,col_ind])
} else{
cols <- 1
}
y_ind <- which(names(data) == name_y)
y <- data[,y_ind]
data <- data[which(is.na(y) == FALSE),]; y <- data[,y_ind]
I <- (1:ncol(data))[-y_ind]
for(i in I){
name_x = names(data)[i]
x <- data[,i]
plot(x, y,pch=16,cex=0.75,
xlab = name_x,
ylab = name_y,
col = cols)
if(is.numeric(x)){
df <- data.frame(x,y)
df$loess <- predict(loess(y~x,df))
df <- df[order(x),]
lines(df$x, df$loess, col="dodgerblue",lwd=2)
}
}
par(mfrow=omfrow)
palette(palette_old)
}
# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
# Step 1 design model
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=100)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=10)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=25)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
summary(model)
source("~/School work/STA 5900/Project 2/Project 2.R", echo=TRUE)
tab$resid <- resid.model
resid.model <- resid(model)
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
summary(model)
resid.model <- resid(model)
tab$resid <- resid.model
prediction_plot(tab, 'resid.model',
m=1,
n=1
)
head(tab)
# STA 5900 Project 2
rm(list=ls())
setwd('C:/Users/conno/Documents/School work/STA 5900/Project 2')
tab <- read.csv('taipei_train.csv')
# Creating prediction function
prediction_plot <- function(data, name_y, color_by = FALSE, m = 2, n=2){
palette_old <- palette()
palette(c("blue2","chocolate2","violetred4","aquamarine4","darkgoldenrod4","mediumorchid3","seagreen4","tan4","yellowgreen"))
omfrow <- par()$mfrow
par(mfrow = c(m,n))
if(color_by != FALSE){
col_ind <- which(names(data) == color_by)
cols <- as.numeric(data[,col_ind])
} else{
cols <- 1
}
y_ind <- which(names(data) == name_y)
y <- data[,y_ind]
data <- data[which(is.na(y) == FALSE),]; y <- data[,y_ind]
I <- (1:ncol(data))[-y_ind]
for(i in I){
name_x = names(data)[i]
x <- data[,i]
plot(x, y,pch=16,cex=0.75,
xlab = name_x,
ylab = name_y,
col = cols)
if(is.numeric(x)){
df <- data.frame(x,y)
df$loess <- predict(loess(y~x,df))
df <- df[order(x),]
lines(df$x, df$loess, col="dodgerblue",lwd=2)
}
}
par(mfrow=omfrow)
palette(palette_old)
}
# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
# Step 1 design model
# Step 2 plug into k-fold
train_control <- trainControl(method='cv',number=9)
model <- train(total_ntd~district+
land_area+
main_building_material+
building_area+
num_room+
num_hall+
num_toilet+
transaction_year+
transaction_month+
building_age,
data=tab,
trControl=train_control,
method='lm'
)
print(model)
summary(model)
resid.model <- resid(model)
tab$resid <- resid.model
prediction_plot(tab, 'resid.model',
m=1,
n=1
)
prediction_plot(tab, 'resid.model',
m=1,
n=1
)
head(tab)
prediction_plot(tab, 'resid',
m=1,
n=1
)
source("~/School work/STA 5900/Project 2/Project 2.R", echo=TRUE)
# STA 5900 Project 2
rm(list=ls())
setwd('C:/Users/conno/Documents/School work/STA 5900/Project 2')
tab <- read.csv('taipei_train.csv')
# Creating prediction function
prediction_plot <- function(data, name_y, color_by = FALSE, m = 2, n=2){
palette_old <- palette()
palette(c("blue2","chocolate2","violetred4","aquamarine4","darkgoldenrod4","mediumorchid3","seagreen4","tan4","yellowgreen"))
omfrow <- par()$mfrow
par(mfrow = c(m,n))
if(color_by != FALSE){
col_ind <- which(names(data) == color_by)
cols <- as.numeric(data[,col_ind])
} else{
cols <- 1
}
y_ind <- which(names(data) == name_y)
y <- data[,y_ind]
data <- data[which(is.na(y) == FALSE),]; y <- data[,y_ind]
I <- (1:ncol(data))[-y_ind]
for(i in I){
name_x = names(data)[i]
x <- data[,i]
plot(x, y,pch=16,cex=0.75,
xlab = name_x,
ylab = name_y,
col = cols)
if(is.numeric(x)){
df <- data.frame(x,y)
df$loess <- predict(loess(y~x,df))
df <- df[order(x),]
lines(df$x, df$loess, col="dodgerblue",lwd=2)
}
}
par(mfrow=omfrow)
palette(palette_old)
}
# Making the district names categoricol variables
#district.names <-unique(tab$district)
#tab$district <- as.factor(tab$district)
#levels(tab$district) <- district.names
# Making the building material categorical variables
#material.names <- unique(tab$main_building_material)
#tab$main_building_material <- as.factor(tab$main_building_material)
#levels(tab$main_building_material) <- material.names
prediction_plot(tab, 'total_ntd',
m=1,
n=1
)
